# Embedding leaflet map to an external website

Now, we have succeeded in making a stand alone leaflet map. However, we want to do something that will upscale from a novice to a pro. That is, we just do one leaflet exercise that will give us that entry to the IT department. If we convince our boss that we could embed a webmap of their branch locations, they could consider us a webmapping guru rather than just another cog in the organization's wheel.

An example of what we want is shown below, which is a snapshot from the [HDX website](https://data.humdata.org/dataset/cod-ab-ken).

```{r}
knitr::include_graphics(rep("D:/gachuhi/my-leaflet/webmap-in-web.jpg"))
```

For this exercise, we shall embed a leaflet map to a simple html webpage. This webpage doesn't look grand, but it serves the purpose of our exercise. Let's get on to it. Here are the [files](https://www.dropbox.com/scl/fo/2u5xzr83z08rfxnlh8pc9/h?dl=0&rlkey=zcrui1dsi7fzi3s5891yx9rty). 

## The html webpage

Create a html page with the following code.

```
<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Pro-GMO Alliance</title>
        <meta charset="utf-8">
        <link rel="stylesheet" href="example-styles.css">
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
        integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
        crossorigin=""/>
        <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
        integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
        crossorigin=""></script>
    </head>
    <body>
    <div id="div-for-article">
        <article id="introduction">
            <h2>Introduction</h2>
            <q>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium 
            doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et 
            quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas 
            sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione 
            voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, 
            consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et 
            dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem 
            ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem 
            vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, 
            vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?</q>
        </article>
    </div>
    <div id="div-for-section">
        <section id="Products">
            <div class="row">
                <h2>Our Products</h2>
                <div class="column">
                  <img src="https://images.unsplash.com/photo-1632125941710-35a9d2fcc7ce?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80" alt="Maize" style="width:100%">
                </div>
                <div class="column">
                    <img src="https://images.unsplash.com/photo-1595615636850-3292eb0a95b0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80" alt="Sunflower" style="width:100%">
                  </div>
                <div class="column">
                  <img src="https://images.unsplash.com/photo-1600333859399-228aa03f7dba?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80" alt="Potato" style="width:100%">
                </div>
                <div class="column">
                  <img src="https://images.unsplash.com/photo-1630145398476-853543b02843?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1167&q=80" alt="Cotton" style="width:100%">
                </div>
              </div>
        </section>
    </div>
    <div>
        <br>
        <h2>Our Branches</h2>
        <br>
    </div>
      <div class="container">
        <div id="map">
          <script src="example-main.js"></script>
        </div>
        <div class="text">
          <h1>Address</h1>
          <p>
            P.O. Box 55044, Nakuru
        </p>
        </div>
      </div>
    </body>
</html>
```

Since this is a geospatial book, we shall not go through every line of the HTML code above. It just a webpage containing some text, some pictures and a webmap. The webmap is the centre of our interest. How do we create a Leaflet map, of which we know how to do it, and fit it inside an existing webpage?

## The CSS 
Before we head there, let's insert the CSS file, which looks like this.

```
/* Three image containers (use 25% for four, and 50% for two, etc) */
.column {
    float: left;
    width: 33.33%;
    padding: 5px;
  }
  
  /* Clear floats after image containers */
  .row::after {
    content: "";
    clear: both;
    display: table;
  }


/* Styling the map */
  .container {
    display: flex;
    align-items: center;
    justify-content: center
  }

#map {
    height: 300px; 
    width: 90%
}

.text {
    font-size: 15px;
    padding-left: 20px;
}
```

## The leaflet js code for our website

Back to the leaflet map of our dummy Pro-GMO Alliance webpage. How did we put the leaflet in there. Nothing complicated, just inserting the same leaflet code, with some additional javascript and referencing it within the html file with `<script src="example-main.js"></script>`. The Javascript file used is shown below.

```
var map = L.map('map').setView([-0.302765, 36.146147], 12);

L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
}).addTo(map);

var branches = [
    ["Potatoes",-0.328858, 36.008474],
    ["Maize",-0.302765, 36.146147],
    ["Sunflower",-0.224832, 36.159880],
    ["Cotton", -0.214189, 36.135847]
    ];

for (var i = 0; i < branches.length; i++) {
    marker = new L.marker([branches[i][1], branches[i][2]])
        .bindPopup(branches[i][0])
        .addTo(map);
}

```

The only new thing in the above script is the `for` loop. In javascript, the `for` loop is used to iterate over items. In this case, and remembering that indexing in javascript arrays begins from 0 just is does for Python, the marker popups will read the latitudes and longitudes which are at index 1 and 2 respectively. The popup strings, which appear as the first elements in the `branches` array, are at index 0. At the end of the chain the markers are added to the map with `.addTo`. Alright, how about keyword `new`?

The `new` keyword is a constructor, it creates an empty object. Many instances of the variable `marker` can be created from the instance of `new` object. For more information on the `new` keyword constructor, see this [website](https://www.programiz.com/javascript/constructor-function). Suffice to know the keyword is mandatory to make the webmap to work in this case, but its helpful to know another javascript trick.

Below is a snapshot of how the dummy Pro-GMO website looks like with our webmap embedded. 

```{r}
knitr::include_graphics(rep("D:/gachuhi/my-leaflet/embedded.jpg"))
```

Part of the success of making the webmap aligned to the left of our address text is the CSS property `display: flex`. This property aligns the element to fill or shrink according to the space available. The padding CSS property just creates space all around the element, thus creating a neat space between the leaflet map and the address text. Removing this will just make the address text and the leaflet map touch each other edge to edge. 

The inspiration to place the map and text side by side was from this [site](https://www.w3docs.com/snippets/css/how-to-vertically-align-text-next-to-an-image.html?utm_source=pocket_saves).

Having done the above, you can consider you are as good a Leaflet mapper to undertake any task!

















